{
  "stats": {
    "suites": 1,
    "tests": 15,
    "passes": 15,
    "pending": 0,
    "failures": 0,
    "start": "2025-06-22T18:45:28.958Z",
    "end": "2025-06-22T18:45:33.237Z",
    "duration": 4279,
    "testsRegistered": 15,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dd3ae4da-1e9c-4b21-bf11-0e6fadcc257a",
      "title": "",
      "fullFile": "cypress/e2e/03-nifi-advanced-settings.cy.js",
      "file": "cypress/e2e/03-nifi-advanced-settings.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "252b3715-d962-4c40-8b27-4254e4ec0754",
          "title": "NiFi Advanced Settings Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should access MultiIssuerJWTTokenAuthenticator advanced settings",
              "fullTitle": "NiFi Advanced Settings Test should access MultiIssuerJWTTokenAuthenticator advanced settings",
              "timedOut": null,
              "duration": 637,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// This is the first functional test for advanced settings access\n// Test Goal: Access and verify the custom UI tabs for the JWT processor\ncy.log('Starting advanced settings test for MultiIssuerJWTTokenAuthenticator');\n// First, we need to add the processor to the canvas\ncy.get('body').then($body => {\n  // Look for ways to add a processor - either drag and drop or add button\n  const hasAddButton = $body.find('*').filter((i, el) => {\n    const text = Cypress.$(el).text().toLowerCase();\n    return text.includes('add') && (text.includes('processor') || text.includes('component'));\n  }).length > 0;\n  const hasToolbar = $body.find('.toolbar, [class*=\"toolbar\"], .palette, [class*=\"palette\"]').length > 0;\n  const hasCanvas = $body.find('#canvas, .canvas, svg').length > 0;\n  cy.log(`Canvas environment: Add button: ${hasAddButton}, Toolbar: ${hasToolbar}, Canvas: ${hasCanvas}`);\n  if (hasAddButton) {\n    // Try to find and click an add processor button\n    cy.get('*').contains(/add.*processor/i).first().click({\n      force: true\n    });\n    cy.wait(1000);\n    // Look for processor selection dialog or component list\n    cy.get('body').then($bodyAfterAdd => {\n      const hasDialog = $bodyAfterAdd.find('[role=\"dialog\"], .dialog, .modal').length > 0;\n      const hasProcessorList = $bodyAfterAdd.find('*').filter((i, el) => {\n        return Cypress.$(el).text().includes('MultiIssuer') || Cypress.$(el).text().includes('JWT');\n      }).length > 0;\n      cy.log(`After add click: Dialog: ${hasDialog}, JWT processor visible: ${hasProcessorList}`);\n      if (hasProcessorList) {\n        // Try to find and select the MultiIssuerJWTTokenAuthenticator\n        cy.get('*').contains(/MultiIssuer.*JWT/i).first().click({\n          force: true\n        });\n        cy.wait(500);\n        // Confirm adding the processor (look for OK, Add, or Apply button)\n        cy.get('body').then($bodyWithProcessor => {\n          const hasConfirmButton = $bodyWithProcessor.find('button').filter((i, btn) => {\n            const text = Cypress.$(btn).text().toLowerCase();\n            return text.includes('ok') || text.includes('add') || text.includes('apply');\n          }).length > 0;\n          if (hasConfirmButton) {\n            cy.get('button').contains(/(ok|add|apply)/i).first().click({\n              force: true\n            });\n            cy.wait(1000);\n            // Now test accessing the processor configuration\n            cy.testProcessorAdvancedSettings();\n          } else {\n            cy.log('No confirm button found, attempting direct configuration access');\n            cy.testProcessorAdvancedSettings();\n          }\n        });\n      } else {\n        cy.log('JWT processor not found in list, testing with any available processor');\n        cy.testProcessorAdvancedSettings();\n      }\n    });\n  } else {\n    cy.log('No add processor button found, testing configuration access with existing elements');\n    cy.testProcessorAdvancedSettings();\n  }\n});",
              "err": {},
              "uuid": "ac770718-8687-4565-8ed3-8871f431f774",
              "parentUUID": "252b3715-d962-4c40-8b27-4254e4ec0754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify JWT processor custom UI components",
              "fullTitle": "NiFi Advanced Settings Test should verify JWT processor custom UI components",
              "timedOut": null,
              "duration": 200,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test specifically for the custom UI components of the JWT processor\ncy.log('Testing JWT processor custom UI component detection');\ncy.get('body').then($body => {\n  // Check if JWT components are already loaded on the page\n  const hasJWTComponents = $body.find('[class*=\"jwt\"], [class*=\"issuer\"], [class*=\"token\"]').length > 0;\n  const hasCustomTabs = $body.find('.custom-tab, [data-tab], .jwt-validator-tabs').length > 0;\n  cy.log(`JWT UI state: Components: ${hasJWTComponents}, Custom tabs: ${hasCustomTabs}`);\n  if (hasJWTComponents || hasCustomTabs) {\n    cy.log('JWT custom UI components detected - testing functionality');\n    cy.testCustomUITabs();\n  } else {\n    cy.log('No JWT UI components detected yet - attempting to access configuration');\n    cy.testProcessorAdvancedSettings();\n  }\n});",
              "err": {},
              "uuid": "fad360ba-66f6-471a-8cbd-aa8f88d2149c",
              "parentUUID": "252b3715-d962-4c40-8b27-4254e4ec0754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should access issuer configuration interface",
              "fullTitle": "NiFi Advanced Settings Test should access issuer configuration interface",
              "timedOut": null,
              "duration": 163,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test specifically for issuer configuration functionality\ncy.log('Testing issuer configuration interface access');\n// Try to access any processor configuration first\ncy.testProcessorAdvancedSettings();\n// Then specifically look for issuer config elements\ncy.get('body').then($body => {\n  const hasIssuerElements = $body.find('*').filter((i, el) => {\n    const text = Cypress.$(el).text().toLowerCase();\n    const className = Cypress.$(el).attr('class') || '';\n    return text.includes('issuer') || className.includes('issuer');\n  }).length > 0;\n  if (hasIssuerElements) {\n    cy.log('Issuer configuration elements detected');\n    cy.testIssuerConfigTab();\n  } else {\n    cy.log('No issuer configuration elements detected in current state');\n  }\n});",
              "err": {},
              "uuid": "8ecaabc6-2907-4557-b3f1-aa4fea79de60",
              "parentUUID": "252b3715-d962-4c40-8b27-4254e4ec0754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should access token verification interface",
              "fullTitle": "NiFi Advanced Settings Test should access token verification interface",
              "timedOut": null,
              "duration": 169,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test specifically for token verification functionality\ncy.log('Testing token verification interface access');\n// Try to access any processor configuration first\ncy.testProcessorAdvancedSettings();\n// Then specifically look for token verification elements\ncy.get('body').then($body => {\n  const hasTokenElements = $body.find('*').filter((i, el) => {\n    const text = Cypress.$(el).text().toLowerCase();\n    const className = Cypress.$(el).attr('class') || '';\n    return text.includes('token') && text.includes('verify') || className.includes('token') || className.includes('verification');\n  }).length > 0;\n  if (hasTokenElements) {\n    cy.log('Token verification elements detected');\n    cy.testTokenVerificationTab();\n  } else {\n    cy.log('No token verification elements detected in current state');\n  }\n});",
              "err": {},
              "uuid": "676d0857-fe27-472e-a6e1-9b88512b4d3d",
              "parentUUID": "252b3715-d962-4c40-8b27-4254e4ec0754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate JWT tokens with processor",
              "fullTitle": "NiFi Advanced Settings Test should validate JWT tokens with processor",
              "timedOut": null,
              "duration": 167,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test JWT token validation functionality\ncy.log('Testing JWT token validation with processor');\n// First access advanced settings to ensure processor is available\ncy.testProcessorAdvancedSettings();\n// Generate test tokens\ncy.generateTestToken({\n  sub: 'test-user',\n  scope: 'read write'\n}).then(validToken => {\n  cy.log('Generated valid token for testing');\n  // Test with valid token (this will attempt validation if interface is available)\n  cy.get('body').then($body => {\n    const hasProcessors = $body.find('g.processor, [class*=\"processor\"], .component').length > 0;\n    if (hasProcessors) {\n      // Try to get processor ID from first processor\n      cy.get('g.processor, [class*=\"processor\"], .component').first().then($processor => {\n        const processorId = $processor.attr('id') || 'test-processor';\n        cy.verifyTokenValidation(processorId, validToken);\n      });\n    } else {\n      cy.log('No processors available for token validation test');\n    }\n  });\n});\n// Test with expired token\ncy.generateExpiredToken().then(_expiredToken => {\n  cy.log('Generated expired token for testing');\n  // Token validation would normally detect this as expired\n});\n// Test with malformed token\ncy.generateMalformedToken().then(_malformedToken => {\n  cy.log('Generated malformed token for testing');\n  // Token validation would normally detect this as invalid\n});",
              "err": {},
              "uuid": "06cae763-d527-4d30-bc5b-c6f36106ab42",
              "parentUUID": "252b3715-d962-4c40-8b27-4254e4ec0754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate JWKS endpoint configuration",
              "fullTitle": "NiFi Advanced Settings Test should validate JWKS endpoint configuration",
              "timedOut": null,
              "duration": 199,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test JWKS endpoint validation functionality\ncy.log('Testing JWKS endpoint validation');\n// Test with Keycloak JWKS endpoint (available in integration environment)\nconst keycloakJwksUrl = 'http://localhost:9080/realms/oauth_integration_tests/protocol/openid-connect/certs';\n// Validate JWKS URL format\ncy.validateJwksUrlFormat(keycloakJwksUrl);\n// Test JWKS endpoint accessibility\ncy.verifyJwksEndpoint(keycloakJwksUrl);\n// Test processor JWKS configuration\ncy.get('body').then($body => {\n  const hasProcessors = $body.find('g.processor, [class*=\"processor\"], .component').length > 0;\n  if (hasProcessors) {\n    cy.get('g.processor, [class*=\"processor\"], .component').first().then($processor => {\n      const processorId = $processor.attr('id') || 'test-processor';\n      // Test different JWKS configuration types\n      cy.testJwksConfiguration(processorId, 'url', keycloakJwksUrl);\n    });\n  } else {\n    cy.log('No processors available for JWKS configuration test');\n  }\n});\n// Create test JWKS configuration\ncy.createTestJwksConfig().then(testJwks => {\n  cy.log('Test JWKS configuration created successfully');\n  expect(testJwks).to.have.property('keys');\n  expect(testJwks.keys).to.be.an('array');\n});",
              "err": {},
              "uuid": "a58d53a1-3426-456f-b126-11a174808fbd",
              "parentUUID": "252b3715-d962-4c40-8b27-4254e4ec0754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle missing required processor properties",
              "fullTitle": "NiFi Advanced Settings Test should handle missing required processor properties",
              "timedOut": null,
              "duration": 143,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('Testing missing required property error handling');\n// Try to add a processor for testing\ncy.get('body').then($body => {\n  const hasAddButton = $body.find('button, [class*=\"add\"], [class*=\"toolbar\"]').filter((i, el) => {\n    const text = Cypress.$(el).text().toLowerCase();\n    return text.includes('add') || text.includes('processor');\n  }).length > 0;\n  if (hasAddButton) {\n    // Add a processor and test missing required properties\n    cy.get('button, [class*=\"add\"], [class*=\"toolbar\"]').contains(/add|processor/i).first().click({\n      force: true\n    });\n    cy.wait(1000);\n    cy.get('body').then($bodyWithDialog => {\n      const hasProcessorList = $bodyWithDialog.find('*').filter((i, el) => {\n        const text = Cypress.$(el).text();\n        return text.includes('MultiIssuer') || text.includes('JWT');\n      }).length > 0;\n      if (hasProcessorList) {\n        cy.get('*').contains(/MultiIssuer.*JWT/i).first().click({\n          force: true\n        });\n        cy.get('button').contains(/(ok|add|apply)/i).first().click({\n          force: true\n        });\n        cy.wait(1000);\n        cy.get('g.processor').first().then($processor => {\n          const processorId = $processor.attr('id');\n          cy.testMissingRequiredProperty(processorId, 'JWKS Type');\n        });\n      }\n    });\n  } else {\n    cy.log('No add button found - testing with existing processors if available');\n    cy.get('body').then($bodyCheck => {\n      const hasProcessors = $bodyCheck.find('g.processor').length > 0;\n      if (hasProcessors) {\n        cy.get('g.processor').first().then($processor => {\n          const processorId = $processor.attr('id');\n          cy.testMissingRequiredProperty(processorId, 'JWKS Type');\n        });\n      }\n    });\n  }\n});",
              "err": {},
              "uuid": "014e046f-e91f-44ff-963c-1b3fca345f14",
              "parentUUID": "252b3715-d962-4c40-8b27-4254e4ec0754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle network timeout scenarios",
              "fullTitle": "NiFi Advanced Settings Test should handle network timeout scenarios",
              "timedOut": null,
              "duration": 147,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('Testing network timeout error handling');\ncy.get('body').then($body => {\n  const hasProcessors = $body.find('g.processor').length > 0;\n  if (hasProcessors) {\n    cy.get('g.processor').first().then($processor => {\n      const processorId = $processor.attr('id');\n      cy.testNetworkTimeout(processorId);\n    });\n  } else {\n    cy.log('No processors available for timeout testing');\n  }\n});",
              "err": {},
              "uuid": "5d362db5-21b7-4448-8bf3-d5548beb38b7",
              "parentUUID": "252b3715-d962-4c40-8b27-4254e4ec0754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle invalid file paths",
              "fullTitle": "NiFi Advanced Settings Test should handle invalid file paths",
              "timedOut": null,
              "duration": 145,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('Testing invalid file path error handling');\ncy.get('body').then($body => {\n  const hasProcessors = $body.find('g.processor').length > 0;\n  if (hasProcessors) {\n    cy.get('g.processor').first().then($processor => {\n      const processorId = $processor.attr('id');\n      cy.testInvalidFilePath(processorId);\n    });\n  } else {\n    cy.log('No processors available for file path testing');\n  }\n});",
              "err": {},
              "uuid": "ccac7bf0-62e1-4928-99b8-fd24baf2e7fe",
              "parentUUID": "252b3715-d962-4c40-8b27-4254e4ec0754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle malformed JSON in JWKS content",
              "fullTitle": "NiFi Advanced Settings Test should handle malformed JSON in JWKS content",
              "timedOut": null,
              "duration": 166,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('Testing malformed JSON error handling');\ncy.get('body').then($body => {\n  const hasProcessors = $body.find('g.processor').length > 0;\n  if (hasProcessors) {\n    cy.get('g.processor').first().then($processor => {\n      const processorId = $processor.attr('id');\n      cy.testMalformedJson(processorId);\n    });\n  } else {\n    cy.log('No processors available for JSON testing');\n  }\n});",
              "err": {},
              "uuid": "133ac265-bc9a-4b20-b0e3-5c3b7425d345",
              "parentUUID": "252b3715-d962-4c40-8b27-4254e4ec0754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should support multiple issuer configurations",
              "fullTitle": "NiFi Advanced Settings Test should support multiple issuer configurations",
              "timedOut": null,
              "duration": 502,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('Testing multi-issuer JWT configuration');\ncy.get('body').then($body => {\n  const hasProcessors = $body.find('g.processor').length > 0;\n  if (hasProcessors) {\n    cy.get('g.processor').first().then($processor => {\n      const processorId = $processor.attr('id');\n      // Test multiple issuers configuration\n      const testIssuers = ['https://issuer1.example.com', 'https://issuer2.example.com', 'https://auth.example.org'];\n      cy.configureMultipleIssuers(processorId, testIssuers);\n      // Validate issuer list format\n      cy.validateIssuerListFormat(testIssuers.join(','));\n      // Test issuer validation settings\n      cy.testIssuerValidation(processorId, true);\n    });\n  } else {\n    cy.log('No processors available for multi-issuer testing');\n  }\n});",
              "err": {},
              "uuid": "352cd968-f565-4bdc-a80d-68b9ed6ec144",
              "parentUUID": "252b3715-d962-4c40-8b27-4254e4ec0754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate multi-issuer property configurations",
              "fullTitle": "NiFi Advanced Settings Test should validate multi-issuer property configurations",
              "timedOut": null,
              "duration": 163,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('Testing multi-issuer property validation');\ncy.get('body').then($body => {\n  const hasProcessors = $body.find('g.processor').length > 0;\n  if (hasProcessors) {\n    cy.get('g.processor').first().then($processor => {\n      const processorId = $processor.attr('id');\n      cy.testMultiIssuerPropertyValidation(processorId);\n    });\n  } else {\n    cy.log('No processors available for property validation testing');\n  }\n});",
              "err": {},
              "uuid": "7cc4f43f-f6bf-4ec8-a6a8-39c99be79da1",
              "parentUUID": "252b3715-d962-4c40-8b27-4254e4ec0754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle different JWKS configuration types for multi-issuer",
              "fullTitle": "NiFi Advanced Settings Test should handle different JWKS configuration types for multi-issuer",
              "timedOut": null,
              "duration": 163,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('Testing different JWKS configuration types');\ncy.get('body').then($body => {\n  const hasProcessors = $body.find('g.processor').length > 0;\n  if (hasProcessors) {\n    cy.get('g.processor').first().then($processor => {\n      const processorId = $processor.attr('id');\n      // Test server-based JWKS\n      cy.testMultiIssuerJwksConfig(processorId, 'server', 'http://localhost:9080/realms/oauth_integration_tests/protocol/openid-connect/certs');\n      // Test file-based JWKS\n      cy.testMultiIssuerJwksConfig(processorId, 'file', '/path/to/test/jwks.json');\n      // Test in-memory JWKS with simple test data\n      const testJwks = {\n        keys: [{\n          kty: 'RSA',\n          use: 'sig',\n          kid: 'test-key-id',\n          n: 'test-modulus',\n          e: 'AQAB'\n        }]\n      };\n      cy.testMultiIssuerJwksConfig(processorId, 'memory', testJwks);\n    });\n  } else {\n    cy.log('No processors available for JWKS configuration testing');\n  }\n});",
              "err": {},
              "uuid": "ea55511b-d2be-4f67-bcd8-cb7262d08e90",
              "parentUUID": "252b3715-d962-4c40-8b27-4254e4ec0754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should test advanced dialog navigation",
              "fullTitle": "NiFi Advanced Settings Test should test advanced dialog navigation",
              "timedOut": null,
              "duration": 201,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('Testing advanced dialog navigation and tab system');\ncy.get('body').then($body => {\n  const hasProcessors = $body.find('g.processor').length > 0;\n  if (hasProcessors) {\n    cy.get('g.processor').first().then($processor => {\n      const processorId = $processor.attr('id');\n      // Test opening advanced dialog\n      cy.openProcessorAdvancedDialog(processorId);\n      // Test cross-tab navigation with different naming conventions\n      cy.testCrossTabNavigation(['tab1', 'tab2', 'tab3']);\n      // Test mixed naming convention navigation\n      cy.testMixedTabNavigation(['properties', 'tab2', 'metrics']);\n      // Test tab alternatives\n      cy.testTabAlternatives();\n      // Close dialog\n      cy.closeAdvancedDialog();\n    });\n  } else {\n    cy.log('No processors available for advanced navigation testing');\n  }\n});",
              "err": {},
              "uuid": "f8cdff27-702c-445e-aef0-d192db3c61b2",
              "parentUUID": "252b3715-d962-4c40-8b27-4254e4ec0754",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify tab content validation",
              "fullTitle": "NiFi Advanced Settings Test should verify tab content validation",
              "timedOut": null,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log('Testing tab content validation');\ncy.get('body').then($body => {\n  const hasProcessors = $body.find('g.processor').length > 0;\n  if (hasProcessors) {\n    cy.get('g.processor').first().then($processor => {\n      const processorId = $processor.attr('id');\n      // Open advanced dialog\n      cy.openProcessorAdvancedDialog(processorId);\n      // Test each tab type validation\n      cy.navigateToCustomUITab('properties');\n      cy.verifyTabContent('properties');\n      cy.navigateToCustomUITab('validation');\n      cy.verifyTabContent('validation');\n      cy.navigateToCustomUITab('advanced');\n      cy.verifyTabContent('advanced');\n      // Close dialog\n      cy.closeAdvancedDialog();\n    });\n  } else {\n    cy.log('No processors available for tab content validation testing');\n  }\n});",
              "err": {},
              "uuid": "9d1d65ed-b5ef-42e5-9723-2579e7f2e842",
              "parentUUID": "252b3715-d962-4c40-8b27-4254e4ec0754",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ac770718-8687-4565-8ed3-8871f431f774",
            "fad360ba-66f6-471a-8cbd-aa8f88d2149c",
            "8ecaabc6-2907-4557-b3f1-aa4fea79de60",
            "676d0857-fe27-472e-a6e1-9b88512b4d3d",
            "06cae763-d527-4d30-bc5b-c6f36106ab42",
            "a58d53a1-3426-456f-b126-11a174808fbd",
            "014e046f-e91f-44ff-963c-1b3fca345f14",
            "5d362db5-21b7-4448-8bf3-d5548beb38b7",
            "ccac7bf0-62e1-4928-99b8-fd24baf2e7fe",
            "133ac265-bc9a-4b20-b0e3-5c3b7425d345",
            "352cd968-f565-4bdc-a80d-68b9ed6ec144",
            "7cc4f43f-f6bf-4ec8-a6a8-39c99be79da1",
            "ea55511b-d2be-4f67-bcd8-cb7262d08e90",
            "f8cdff27-702c-445e-aef0-d192db3c61b2",
            "9d1d65ed-b5ef-42e5-9723-2579e7f2e842"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3368,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "tests-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}